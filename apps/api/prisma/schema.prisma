// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model Sample {
//   id        Int      @id @default(autoincrement())
//   name      String
//   code      String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("samples") // if you want to use snake_case format
// }
model User {
  id         Int       @id @default(autoincrement())
  username   String
  email      String    @unique
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  role       RoleUser  @default(CUSTOMER)
  isVerified Boolean   @default(false)

  UserDetail  UserDetail?
  Event       Event[]
  UserVoucher UserVoucher[]
  Point       Point?
  Review      Review?
  Transaction Transaction?

  @@map("users") // if you want to use snake_case format
}

enum RoleUser {
  CUSTOMER
  ORGANIZER
}

model UserDetail {
  id          Int              @id @default(autoincrement())
  phoneNumber String
  firstName   String
  lastName    String
  referral    String           @unique
  userId      Int              @unique
  gender      GenderUserDetail @default(MALE)

  user User @relation(fields: [userId], references: [id])

  @@map("user_details")
}

enum GenderUserDetail {
  MALE
  FEMALE
}

model Category {
  id    Int     @id @default(autoincrement())
  title String
  Event Event[]

  @@map("categories")
}

model Location {
  id       Int     @id @default(autoincrement())
  name     String
  city     String
  province String
  address  String
  Event    Event[]

  @@map("locations")
}

model TicketType {
  id          Int       @id @default(autoincrement())
  title       String
  price       Int
  limit       Int
  booked      Int
  expiredDate DateTime?

  eventId           Int
  event             Event               @relation(fields: [eventId], references: [id])
  TransactionDetail TransactionDetail?

  @@map("ticket_types")
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.LongText
  startDate   DateTime
  endDate     DateTime
  limit       Int
  booked      Int

  locationId Int
  userId     Int
  categoryId Int

  location     Location       @relation(fields: [locationId], references: [id])
  user         User           @relation(fields: [userId], references: [id])
  category     Category       @relation(fields: [categoryId], references: [id])
  TicketType   TicketType[]
  EventVoucher EventVoucher[]
  Review       Review?
  Transaction  Transaction?

  @@map("events")
}

model Voucher {
  id            Int            @id @default(autoincrement())
  title         String
  discountValue Int
  voucherType   VoucherType    @default(REWARDS)
  createdAt     DateTime       @default(now())
  expiredDate   DateTime
  limit         Int?
  used          Int?
  UserVoucher   UserVoucher[]
  EventVoucher  EventVoucher[]

  @@map("voucher")
}

enum VoucherType {
  REWARDS
  DISCOUNT
}

model UserVoucher {
  id        Int @id @default(autoincrement())
  voucherId Int
  userId    Int

  user    User    @relation(fields: [userId], references: [id])
  voucher Voucher @relation(fields: [voucherId], references: [id])

  @@map("user_voucher")
}

model EventVoucher {
  id        Int @id @default(autoincrement())
  voucherId Int
  eventId   Int

  voucher Voucher @relation(fields: [voucherId], references: [id])
  event   Event   @relation(fields: [eventId], references: [id])

  @@map("event_voucher")
}

model Point {
  id          Int      @id @default(autoincrement())
  totalPoints Int
  updatedAt   DateTime @updatedAt
  expiredDate DateTime
  userId      Int      @unique

  user User @relation(fields: [userId], references: [id])

  @@map("points")
}

model Review {
  id         Int          @id @default(autoincrement())
  rating     RatingReview
  reviewText String?      @db.LongText
  userId     Int          @unique
  eventId    Int          @unique

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@map("reviews")
}

enum RatingReview {
  STAR_1
  STAR_2
  STAR_3
  STAR_4
  STAR_5
}

model Transaction {
  id        Int               @id @default(autoincrement())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  status    StatusTransaction @default(PENDING)
  total     Int
  userId    Int               @unique
  eventId   Int               @unique

  user              User                @relation(fields: [userId], references: [id])
  event             Event               @relation(fields: [eventId], references: [id])
  TransactionDetail TransactionDetail?

  @@map("transactions")
}

enum StatusTransaction {
  PENDING
  COMPLETE
  ERROR
  CANCELLED
}

model TransactionDetail {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  qty           Int
  transactionId Int      @unique
  ticketTypeId  Int      @unique

  transaction Transaction @relation(fields: [transactionId], references: [id])
  ticketType  TicketType  @relation(fields: [ticketTypeId], references: [id])

  @@map("transaction_detail")
}
