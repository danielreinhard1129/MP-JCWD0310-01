// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model User {
  id           Int            @id @default(autoincrement())
  fullName     String
  email        String         @unique
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  isVerified   Boolean        @default(false)
  role         RoleUser       @default(CUSTOMER)
  UserDetail   UserDetail?
  Event        Event[]
  UserReward   UserReward[]
  UserDiscount UserDiscount[]
  Point        Point?
  Review       Review[]
  Transaction  Transaction[]

  @@map("users") // if you want to use snake_case format
}

enum RoleUser {
  CUSTOMER
  ORGANIZER
}

model UserDetail {
  id          Int              @id @default(autoincrement())
  phoneNumber String?
  firstName   String?
  lastName    String?
  referral    String?          @unique
  userId      Int              @unique
  gender      GenderUserDetail @default(MALE)

  user User @relation(fields: [userId], references: [id])

  @@map("user_details")
}

enum GenderUserDetail {
  MALE
  FEMALE
}

model Location {
  id       Int    @id @default(autoincrement())
  name     String
  city     String
  province String
  address  String

  @@map("locations")
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.LongText
  startDate   DateTime
  endDate     DateTime
  address     String
  city        String
  limit       Int
  booked      Int?     @default(0)
  thumbnail   String
  category    String
  price       Int

  organizerId Int
  organizer   User         @relation(fields: [organizerId], references: [id])
  deletedAt   DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  // TicketType  TicketType[]
  Review      Review?
  Transaction Transaction[]
  Discount    Discount[]

  @@map("events")
}

model Reward {
  id            Int          @id @default(autoincrement())
  title         String
  discountValue Int
  createdAt     DateTime     @default(now())
  expiredDate   DateTime
  UserReward    UserReward[]

  @@map("rewards")
}

model UserReward {
  id                Int                @id @default(autoincrement())
  rewardId          Int
  userId            Int
  isUsed            Boolean            @default(false)
  user              User               @relation(fields: [userId], references: [id])
  reward            Reward             @relation(fields: [rewardId], references: [id])
  TransactionDetail TransactionDetail?

  @@map("user_rewards")
}

model Discount {
  id            Int            @id @default(autoincrement())
  name          String
  discountValue Int
  createdAt     DateTime       @default(now())
  expires       DateTime
  limit         Int
  used          Int            @default(0)
  eventId       Int
  event         Event          @relation(fields: [eventId], references: [id])
  UserDiscount  UserDiscount[]
  // EventVoucher  EventVoucher[]

  @@map("discounts")
}

model UserDiscount {
  id         Int     @id @default(autoincrement())
  discountId Int
  userId     Int
  isUsed     Boolean @default(false)

  discount          Discount           @relation(fields: [discountId], references: [id])
  user              User               @relation(fields: [userId], references: [id])
  TransactionDetail TransactionDetail?

  @@map("user_discounts")
}

model Point {
  id          Int      @id @default(autoincrement())
  totalPoints Int      @default(0)
  updatedAt   DateTime @updatedAt
  expiredDate DateTime
  userId      Int      @unique

  user              User               @relation(fields: [userId], references: [id])
  TransactionDetail TransactionDetail?

  @@map("points")
}

model Review {
  id         Int          @id @default(autoincrement())
  rating     RatingReview
  reviewText String?      @db.LongText
  userId     Int
  eventId    Int          @unique

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@map("reviews")
}

enum RatingReview {
  STAR_1
  STAR_2
  STAR_3
  STAR_4
  STAR_5
}

model Transaction {
  id           Int               @id @default(autoincrement())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  status       StatusTransaction @default(OPENED)
  total        Int
  userId       Int
  eventId      Int               
  paymentProof String?

  user              User               @relation(fields: [userId], references: [id])
  event             Event              @relation(fields: [eventId], references: [id])
  TransactionDetail TransactionDetail?

  @@map("transactions")
}

enum StatusTransaction {
  OPENED
  PENDING
  COMPLETE
  EXPIRED
  CANCELLED
}

model TransactionDetail {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  qty            Int
  transactionId  Int      @unique
  ticketTypeId   Int      @unique
  userDiscountId Int?     @unique
  userRewardId   Int?     @unique
  pointId        Int?     @unique

  transaction  Transaction   @relation(fields: [transactionId], references: [id])
  userDiscount UserDiscount? @relation(fields: [userDiscountId], references: [id])
  userReward   UserReward?   @relation(fields: [userRewardId], references: [id])
  point        Point?        @relation(fields: [pointId], references: [id])

  @@map("transaction_detail")
}
